syntax = "proto3";

option go_package = "github.com/ray-project/ray-contrib/api/go_client";
package api;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {
          ref: ".api.Status";
        }
      }
    }
  }
};

service ClusterService {
  // Creates a new Cluster.
  rpc CreateCluster(CreateClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      post: "/apis/v1alpha1/clusters"
      body: "cluster"
    };
  }

  // Finds a specific Cluster by ID.
  rpc GetCluster(GetClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      get: "/apis/v1alpha1/clusters/{id}"
    };
  }

  // Finds all Clusters. Supports pagination, and sorting on certain fields.
  rpc ListCluster(ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {
      get: "/apis/v1alpha1/clusters"
    };
  }

  // Deletes an cluster without deleting the cluster's runs and jobs. To
  // avoid unexpected behaviors, delete an cluster's runs and jobs before
  // deleting the cluster.
  rpc DeleteCluster(DeleteClusterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/apis/v1alpha1/clusters/{id}"
    };
  }

  // Archives an cluster and the cluster's runs and jobs.
  rpc ArchiveCluster(ArchiveClusterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/apis/v1alpha1/clusters/{id}:archive"
    };
  }

  // Restores an archived cluster. The Cluster's archived runs and jobs
  // will stay archived.
  rpc UnarchiveCluster(UnarchiveClusterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/apis/v1alpha1/clusters/{id}:unarchive"
    };
  }
}


message CreateClusterRequest {
  // The Cluster to be created.
  Cluster cluster = 1;
}

message GetClusterRequest {
  // The ID of the Cluster to be retrieved.
  string id = 1;
  // The name of the Cluster to be retrieved.
  string name = 2;
  // The namespace of the Cluster to be retrieved.
  string namespace = 3;
}

message ListClustersRequest {
  // A page token to request the next page of results. The token is acquried
  // from the nextPageToken field of the response from the previous
  // ListCluster call or can be omitted when fetching the first page.
  string page_token = 1;

  // The number of Clusters to be listed per page. If there are more
  // Clusters than this number, the response message will contain a
  // nextPageToken field you can use to fetch the next page.
  int32 page_size = 2;

  // Can be format of "field_name", "field_name asc" or "field_name desc"
  // Ascending by default.
  string sort_by = 3;

  // Kubernetes namespace as the list options
  string namespace = 4;

  // Kubernetes list options for labelselector
  string user = 5;

}

message ListClustersResponse {
  // A list of Clusters returned.
  repeated Cluster clusters = 1;

  // The total number of Clusters for the given query.
  int32 total_size = 2;

  // The token to list the next page of Clusters.
  string next_page_token = 3;
}

message DeleteClusterRequest {
  // The ID of the cluster to be deleted.
  string id = 1;
  // The name of the Cluster to be retrieved.
  string name = 2;
  // The namespace of the Cluster to be retrieved.
  string namespace = 3;
}

message Cluster {
  // Output. Unique Cluster ID. Generated by API server.
  string id = 1;

  // Required input field. Unique Cluster name provided by user.
  string name = 2;

  // Required input field. Cluster's namespace provided by user
  string namespace = 3;

  // Required field. This field indicates the user who owns the cluster.
  string user = 4;

  // Optional input field. Ray cluster version
  string version = 5;

  // Optional field.
  enum Environment {
    DEV = 0;
    TESTING = 1;
    STAGING = 2;
    PRODUCTION = 3;
  }
  Environment environment = 6;

  // Required field. This field will be used to retrieve right ray container
  string cluster_runtime = 7;
  
  // Required field. This field 
  string compute_runtime = 8;

  // Output. The time that the Cluster created.
  google.protobuf.Timestamp created_at = 9;

  // Output. The time that the Cluster deleted.
  google.protobuf.Timestamp deleted_at = 10;
}

message ArchiveClusterRequest {
  // The ID of the Cluster to be archived.
  string id = 1;
}

message UnarchiveClusterRequest {
  // The ID of the Cluster to be restored.
  string id = 1;
}

