// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterRuntimeServiceClient is the client API for ClusterRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterRuntimeServiceClient interface {
	// Creates a new Cluster.
	CreateClusterRuntime(ctx context.Context, in *CreateClusterRuntimeRequest, opts ...grpc.CallOption) (*ClusterRuntime, error)
	// Finds a specific Cluster by ID.
	GetClusterRuntime(ctx context.Context, in *GetClusterRuntimeRequest, opts ...grpc.CallOption) (*ClusterRuntime, error)
	// Finds all Clusters. Supports pagination, and sorting on certain fields.
	ListClusterRuntimes(ctx context.Context, in *ListClusterRuntimesRequest, opts ...grpc.CallOption) (*ListClusterRuntimesResponse, error)
	// Deletes an Cluster without deleting the Cluster's runs and jobs. To
	// avoid unexpected behaviors, delete an Cluster's runs and jobs before
	// deleting the Cluster.
	DeleteClusterRuntime(ctx context.Context, in *DeleteClusterRuntimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clusterRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterRuntimeServiceClient(cc grpc.ClientConnInterface) ClusterRuntimeServiceClient {
	return &clusterRuntimeServiceClient{cc}
}

func (c *clusterRuntimeServiceClient) CreateClusterRuntime(ctx context.Context, in *CreateClusterRuntimeRequest, opts ...grpc.CallOption) (*ClusterRuntime, error) {
	out := new(ClusterRuntime)
	err := c.cc.Invoke(ctx, "/api.ClusterRuntimeService/CreateClusterRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterRuntimeServiceClient) GetClusterRuntime(ctx context.Context, in *GetClusterRuntimeRequest, opts ...grpc.CallOption) (*ClusterRuntime, error) {
	out := new(ClusterRuntime)
	err := c.cc.Invoke(ctx, "/api.ClusterRuntimeService/GetClusterRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterRuntimeServiceClient) ListClusterRuntimes(ctx context.Context, in *ListClusterRuntimesRequest, opts ...grpc.CallOption) (*ListClusterRuntimesResponse, error) {
	out := new(ListClusterRuntimesResponse)
	err := c.cc.Invoke(ctx, "/api.ClusterRuntimeService/ListClusterRuntimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterRuntimeServiceClient) DeleteClusterRuntime(ctx context.Context, in *DeleteClusterRuntimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ClusterRuntimeService/DeleteClusterRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterRuntimeServiceServer is the server API for ClusterRuntimeService service.
// All implementations must embed UnimplementedClusterRuntimeServiceServer
// for forward compatibility
type ClusterRuntimeServiceServer interface {
	// Creates a new Cluster.
	CreateClusterRuntime(context.Context, *CreateClusterRuntimeRequest) (*ClusterRuntime, error)
	// Finds a specific Cluster by ID.
	GetClusterRuntime(context.Context, *GetClusterRuntimeRequest) (*ClusterRuntime, error)
	// Finds all Clusters. Supports pagination, and sorting on certain fields.
	ListClusterRuntimes(context.Context, *ListClusterRuntimesRequest) (*ListClusterRuntimesResponse, error)
	// Deletes an Cluster without deleting the Cluster's runs and jobs. To
	// avoid unexpected behaviors, delete an Cluster's runs and jobs before
	// deleting the Cluster.
	DeleteClusterRuntime(context.Context, *DeleteClusterRuntimeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedClusterRuntimeServiceServer()
}

// UnimplementedClusterRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterRuntimeServiceServer struct {
}

func (UnimplementedClusterRuntimeServiceServer) CreateClusterRuntime(context.Context, *CreateClusterRuntimeRequest) (*ClusterRuntime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClusterRuntime not implemented")
}
func (UnimplementedClusterRuntimeServiceServer) GetClusterRuntime(context.Context, *GetClusterRuntimeRequest) (*ClusterRuntime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterRuntime not implemented")
}
func (UnimplementedClusterRuntimeServiceServer) ListClusterRuntimes(context.Context, *ListClusterRuntimesRequest) (*ListClusterRuntimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterRuntimes not implemented")
}
func (UnimplementedClusterRuntimeServiceServer) DeleteClusterRuntime(context.Context, *DeleteClusterRuntimeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterRuntime not implemented")
}
func (UnimplementedClusterRuntimeServiceServer) mustEmbedUnimplementedClusterRuntimeServiceServer() {}

// UnsafeClusterRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterRuntimeServiceServer will
// result in compilation errors.
type UnsafeClusterRuntimeServiceServer interface {
	mustEmbedUnimplementedClusterRuntimeServiceServer()
}

func RegisterClusterRuntimeServiceServer(s grpc.ServiceRegistrar, srv ClusterRuntimeServiceServer) {
	s.RegisterService(&ClusterRuntimeService_ServiceDesc, srv)
}

func _ClusterRuntimeService_CreateClusterRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterRuntimeServiceServer).CreateClusterRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClusterRuntimeService/CreateClusterRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterRuntimeServiceServer).CreateClusterRuntime(ctx, req.(*CreateClusterRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterRuntimeService_GetClusterRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterRuntimeServiceServer).GetClusterRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClusterRuntimeService/GetClusterRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterRuntimeServiceServer).GetClusterRuntime(ctx, req.(*GetClusterRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterRuntimeService_ListClusterRuntimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterRuntimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterRuntimeServiceServer).ListClusterRuntimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClusterRuntimeService/ListClusterRuntimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterRuntimeServiceServer).ListClusterRuntimes(ctx, req.(*ListClusterRuntimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterRuntimeService_DeleteClusterRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterRuntimeServiceServer).DeleteClusterRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ClusterRuntimeService/DeleteClusterRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterRuntimeServiceServer).DeleteClusterRuntime(ctx, req.(*DeleteClusterRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterRuntimeService_ServiceDesc is the grpc.ServiceDesc for ClusterRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ClusterRuntimeService",
	HandlerType: (*ClusterRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClusterRuntime",
			Handler:    _ClusterRuntimeService_CreateClusterRuntime_Handler,
		},
		{
			MethodName: "GetClusterRuntime",
			Handler:    _ClusterRuntimeService_GetClusterRuntime_Handler,
		},
		{
			MethodName: "ListClusterRuntimes",
			Handler:    _ClusterRuntimeService_ListClusterRuntimes_Handler,
		},
		{
			MethodName: "DeleteClusterRuntime",
			Handler:    _ClusterRuntimeService_DeleteClusterRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime.proto",
}

// ComputeRuntimeServiceClient is the client API for ComputeRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeRuntimeServiceClient interface {
	// Creates a new Cluster.
	CreateComputeRuntime(ctx context.Context, in *CreateComputeRuntimeRequest, opts ...grpc.CallOption) (*ComputeRuntime, error)
	// Finds a specific Cluster by ID.
	GetComputeRuntime(ctx context.Context, in *GetComputeRuntimeRequest, opts ...grpc.CallOption) (*ComputeRuntime, error)
	// Finds all Clusters. Supports pagination, and sorting on certain fields.
	ListComputeRuntimes(ctx context.Context, in *ListComputeRuntimesRequest, opts ...grpc.CallOption) (*ListComputeRuntimesResponse, error)
	// Deletes an Cluster without deleting the Cluster's runs and jobs. To
	// avoid unexpected behaviors, delete an Cluster's runs and jobs before
	// deleting the Cluster.
	DeleteComputeRuntime(ctx context.Context, in *DeleteComputeRuntimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type computeRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeRuntimeServiceClient(cc grpc.ClientConnInterface) ComputeRuntimeServiceClient {
	return &computeRuntimeServiceClient{cc}
}

func (c *computeRuntimeServiceClient) CreateComputeRuntime(ctx context.Context, in *CreateComputeRuntimeRequest, opts ...grpc.CallOption) (*ComputeRuntime, error) {
	out := new(ComputeRuntime)
	err := c.cc.Invoke(ctx, "/api.ComputeRuntimeService/CreateComputeRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeRuntimeServiceClient) GetComputeRuntime(ctx context.Context, in *GetComputeRuntimeRequest, opts ...grpc.CallOption) (*ComputeRuntime, error) {
	out := new(ComputeRuntime)
	err := c.cc.Invoke(ctx, "/api.ComputeRuntimeService/GetComputeRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeRuntimeServiceClient) ListComputeRuntimes(ctx context.Context, in *ListComputeRuntimesRequest, opts ...grpc.CallOption) (*ListComputeRuntimesResponse, error) {
	out := new(ListComputeRuntimesResponse)
	err := c.cc.Invoke(ctx, "/api.ComputeRuntimeService/ListComputeRuntimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeRuntimeServiceClient) DeleteComputeRuntime(ctx context.Context, in *DeleteComputeRuntimeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ComputeRuntimeService/DeleteComputeRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeRuntimeServiceServer is the server API for ComputeRuntimeService service.
// All implementations must embed UnimplementedComputeRuntimeServiceServer
// for forward compatibility
type ComputeRuntimeServiceServer interface {
	// Creates a new Cluster.
	CreateComputeRuntime(context.Context, *CreateComputeRuntimeRequest) (*ComputeRuntime, error)
	// Finds a specific Cluster by ID.
	GetComputeRuntime(context.Context, *GetComputeRuntimeRequest) (*ComputeRuntime, error)
	// Finds all Clusters. Supports pagination, and sorting on certain fields.
	ListComputeRuntimes(context.Context, *ListComputeRuntimesRequest) (*ListComputeRuntimesResponse, error)
	// Deletes an Cluster without deleting the Cluster's runs and jobs. To
	// avoid unexpected behaviors, delete an Cluster's runs and jobs before
	// deleting the Cluster.
	DeleteComputeRuntime(context.Context, *DeleteComputeRuntimeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedComputeRuntimeServiceServer()
}

// UnimplementedComputeRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComputeRuntimeServiceServer struct {
}

func (UnimplementedComputeRuntimeServiceServer) CreateComputeRuntime(context.Context, *CreateComputeRuntimeRequest) (*ComputeRuntime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComputeRuntime not implemented")
}
func (UnimplementedComputeRuntimeServiceServer) GetComputeRuntime(context.Context, *GetComputeRuntimeRequest) (*ComputeRuntime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputeRuntime not implemented")
}
func (UnimplementedComputeRuntimeServiceServer) ListComputeRuntimes(context.Context, *ListComputeRuntimesRequest) (*ListComputeRuntimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComputeRuntimes not implemented")
}
func (UnimplementedComputeRuntimeServiceServer) DeleteComputeRuntime(context.Context, *DeleteComputeRuntimeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComputeRuntime not implemented")
}
func (UnimplementedComputeRuntimeServiceServer) mustEmbedUnimplementedComputeRuntimeServiceServer() {}

// UnsafeComputeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeRuntimeServiceServer will
// result in compilation errors.
type UnsafeComputeRuntimeServiceServer interface {
	mustEmbedUnimplementedComputeRuntimeServiceServer()
}

func RegisterComputeRuntimeServiceServer(s grpc.ServiceRegistrar, srv ComputeRuntimeServiceServer) {
	s.RegisterService(&ComputeRuntimeService_ServiceDesc, srv)
}

func _ComputeRuntimeService_CreateComputeRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComputeRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeRuntimeServiceServer).CreateComputeRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ComputeRuntimeService/CreateComputeRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeRuntimeServiceServer).CreateComputeRuntime(ctx, req.(*CreateComputeRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeRuntimeService_GetComputeRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeRuntimeServiceServer).GetComputeRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ComputeRuntimeService/GetComputeRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeRuntimeServiceServer).GetComputeRuntime(ctx, req.(*GetComputeRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeRuntimeService_ListComputeRuntimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComputeRuntimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeRuntimeServiceServer).ListComputeRuntimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ComputeRuntimeService/ListComputeRuntimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeRuntimeServiceServer).ListComputeRuntimes(ctx, req.(*ListComputeRuntimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeRuntimeService_DeleteComputeRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComputeRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeRuntimeServiceServer).DeleteComputeRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ComputeRuntimeService/DeleteComputeRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeRuntimeServiceServer).DeleteComputeRuntime(ctx, req.(*DeleteComputeRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputeRuntimeService_ServiceDesc is the grpc.ServiceDesc for ComputeRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ComputeRuntimeService",
	HandlerType: (*ComputeRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComputeRuntime",
			Handler:    _ComputeRuntimeService_CreateComputeRuntime_Handler,
		},
		{
			MethodName: "GetComputeRuntime",
			Handler:    _ComputeRuntimeService_GetComputeRuntime_Handler,
		},
		{
			MethodName: "ListComputeRuntimes",
			Handler:    _ComputeRuntimeService_ListComputeRuntimes_Handler,
		},
		{
			MethodName: "DeleteComputeRuntime",
			Handler:    _ComputeRuntimeService_DeleteComputeRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime.proto",
}
